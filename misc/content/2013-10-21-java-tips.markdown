UUID: 03a0e2cd-fce2-48ec-9fdd-4addcaad0021
Status: published
Author: Ben Chuanlong Du
Title: Tips for Java Programming
Date: 2013-10-20 00:00:00
Slug: java-tips
Category: Software
Tags: tips

**Things on this page are fragmentary and immature notes/thoughts of the author. It is not meant to readers but rather for convenient reference of the author and future improvement.**
 


貌似数组很危险的样子，总能将其改变, that's why people use defensive copy


## class and object

## skills

1. if you really care about loop performance, don't put expression in test conditions, 
sometime this is as easy as switch the initial condition and the test condition	

2. 很多时候从后往前的算法都比从前往后的算法要好	

3. use as few instance variables in a class as possible. 
This not only make your code clean but also easy to write copy constructors, 
setter methods and so on. 
Sometimes, instance variables affect each other, so setter methods become complex ...

4. 虽然提倡重用代码，但是不要为了重用而重用，首要保证代码简洁易懂。
如果某些instance variable改变了之后会影响其他一些instance variable，
那么不要直接在setter method里面进行修改。
比较好的办法是写一个public refresh函数，全部进行更新，
这样保证了程序简单易懂，不容易出错。	

5. 同时可以在setter method里面引入一个autoRefresh参数，给予用户选择的权利。
对于那写很耗时的fresh，可以有用户最后一次性更新。
而如果用户指向更新一个比较简单的东西，那么可以给定参数autoRefresh=true，这样就不用多写一行代码。	

6. 另外一种可行的办法是lazy evaluation，也就是说在必要的时候再去更新或者初始化，这样也能简化操作，节省时间。貌似这个想法更好
********************************************************************************************************************************************************



balance is the hardest thing. Always think before you start writing a program. 
Think about whether it's better to write a simple one which runs a longer time or to write a complex one but runs a shorter time. 	



(int) keeps only the integer part ... when positive is similar to math.floor	

nextInt of RandomDataImpl is badly implemented	


if immutable or final, no need to use getter method

for mutable classes, when you return the inner states 
(i.e. instance variables) you'd better make defensive copies, 
because o.w. they can be modified by other classes. That's why people prefer immutable classes. 	

