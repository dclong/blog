UUID: 03a0e2cd-fce2-48ec-9fdd-4addcaad0021
Status: published
Author: Ben Chuanlong Du
Title: Tips for Java Programming
Date: 2019-03-19 19:42:58
Slug: java-tips
Category: Software
Tags: tips

**Things on this page are fragmentary and immature notes/thoughts of the author. It is not meant to readers but rather for convenient reference of the author and future improvement.**
 


## Useful Java Libraries

### [picocli](https://github.com/remkop/picocli)

Parser library and framework to easily build JVM command line applications (Java, Groovy, Kotlin, etc). 
Usage help with ANSI colors. Autocomplete. Nested subcommands. Annotations and programmatic API. 
Easy to include as source to avoid adding dependencies.

## Array

1. Array is muTipstable in Java.
    If an array is define as a member of a class is intend to change inside the class only,
    you have to make defensive copies of the array.
    Please refer to [Defensive Copying](http://www.javapractices.com/topic/TopicAction.do?Id=15)
    for more details.

## Misc

1. If you really care about the performance of a loop,
    you should avoid heavy computation in test condition
    as the test condition is rerun every time. 
    Sometimes this can be avoid simplify by switching the initial condition and the test condition.

2. Backalgorithms are often better than forward algorithms especially for arrays.

3. Avoid having too many instance variables in a class.
    This not only keeps your code cleaner 
    but also makes it easy to write copy constructors, setter methods and so on. 
    Sometimes, instance variables intervent with each other making setter methods more complicated.
    Having fewer instance variables helps to reduce the complexity.
    If possible, 
    you can encapsulate some coupled instance members into another inner class.

4. Don't over design. 
    Don't reuse code for reusing code.
    There is always trade-off.

5. Integer cast `(int) some_number` keeps the integer part of the number only
    and discard the decimal part.
    It is equivalent to `math.floor` when positive 
    and equivalent to `math.ceiling` when negative.

6. `RandomDataImpl.nextInt` is badly implemented.

7. No need to use getter/setter methods for final immutable instance members. 
    Just make them public/protected.
