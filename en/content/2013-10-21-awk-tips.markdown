UUID: 03a0e2cd-fce2-48ec-9fdd-4addcaad0021
Status: published
Author: Ben Chuanlong Du
Title: Tips for AWK
Date: 2017-02-18 12:05:48
Slug: awk-tips
Category: Software
Tags: tips, awk, text manipulation

**
Things on this page are fragmentary and immature notes/thoughts of the author. 
It is not meant to readers but rather for convenient reference of the author and future improvement.
**

[AWK Tutorial](http://www.grymoire.com/Unix/Awk.html)

1. For small structured text files, 
it is suggested that you use the [q](http://harelba.github.io/q/)
command to manipulate it.

For complicated logic, 
it is suggested that you use a scripting language (e.g., Python) instead. 
I personally discourage using of `awk` 
unless you have a large file (that q cannot handle) 
and the operations you want do are simple.

2. Basic syntax of `awk`
    ```sh
    awk 'BEGIN {start_action} {action} END {stop_action}' file_name
    ```

3. Whether to user single or double quote depends on
whether you use column variables in the expression.
This is consistent with shell variable substitution.

2. `awk` ignorecase when working on files make unnecessary redundant output
very annoying, not sure why

3. `awk` does not recognize escaped characters in CSV formatted. 
Make sure that the file `awk` works on is in simple format.

## Field Delimiter

The filed delimiter of AWK supports can be a regular expression.
```sh
awk -F'[/=]' '{print $3 "\t" $5 "\t" $8}' file_name
```


## Column/Field Filtering/Manipulation

1. Select 1st and 3rd column (seprated by tab)
    ```sh
    awk '{print $1 "\t" $3}' file_name
    ```

2. Sum of the 5th filed.
    ```sh
    awk 'BEGIN {s=0} {s=s+$5} END {print s}' file_name
    ```

## Rows Filtering/Manipulation

1. Print rows of the file with the first field greater than 3.
    ```sh
    awk '{ if($1 > 3) print }' file_name
    ```

2. Print docker image IDs that has no repositories names.
    ```bash
    docker images | awk '{ if ($1 == "<none>") print $3 }'
    ```

3. Print rows with 2 fileds.
    ```sh
    awk 'NF == 2' file_name
    ```
    Or more verbosally (and more portable)
    ```sh
    awk 'NF == 2 {print} {}' file_name
    ```

4. Count the number of fields in each line.
    ```sh
    awk '{print NF}' file_name
    ```

